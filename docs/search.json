[{"path":"https://hjalal.github.io/twig/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://hjalal.github.io/twig/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://hjalal.github.io/twig/articles/decision_tree.html","id":"twig","dir":"Articles","previous_headings":"","what":"twig","title":"Decision Tree Herpes Virus Encephalopathy","text":"","code":"library(twig)"},{"path":"https://hjalal.github.io/twig/articles/decision_tree.html","id":"twig-model-definition","dir":"Articles","previous_headings":"twig","what":"twig model definition","title":"Decision Tree Herpes Virus Encephalopathy","text":"","code":"mytwig <- twig() +    decisions(names=c(DoNotTreat, Treat, Biopsy)) +  # treatment options   event(name = DIE,  # first event         options = c(yes, none), # either occurs or doesn't occur         probs = c(pDie, leftover),  # occurs with prob pDie and doesn't occur with 1-pDie (leftover)         transitions = c(Death, HVE_event)) + # if it occurs, transitions to Death, otherwise the HVE_event   event(name = HVE_event,  # similarly, HVE_event occurs with f_HVE but if not it will be OVE         options = c(yes, none),          probs = c(f_HVE, leftover),          transitions = c(get_HVE_comp, get_OVE_comp)) +   event(name = get_HVE_comp, # evaluate whether HVE complications occured          options = c(yes, none),          probs = c(p_comp, leftover),         transitions = c(HVE_comp, no_HVE_comp))  +   event(name = get_OVE_comp, # evaluate whether other viral encephalitis (OVE) complications occured         options = c(yes, none),          probs = c(p_comp, leftover),         transitions = c(OVE_comp, no_OVE_comp)) +    payoffs(names = c(cost, utility)) # finally measure the cost and utilities"},{"path":"https://hjalal.github.io/twig/articles/decision_tree.html","id":"decisiontwig","dir":"Articles","previous_headings":"twig","what":"DecisionTwig","title":"Decision Tree Herpes Virus Encephalopathy","text":"DecisionTwig, decision tree looks like :","code":""},{"path":"https://hjalal.github.io/twig/articles/decision_tree.html","id":"model-parameters","dir":"Articles","previous_headings":"","what":"Model parameters","title":"Decision Tree Herpes Virus Encephalopathy","text":"Define data frame model parameters list scalar values. can also ve dataset running probabilistic analysis.","code":"params <- list(   # Probabilities,   p_HVE          = 0.52   ,# prevalence of HVE   p_HVE_comp     = 0.71   ,# complications with untreated HVE   p_OVE_comp     = 0.01   ,# complications with untreated OVE   p_HVE_comp_tx  = 0.36   ,# complications with treated HVE   p_OVE_comp_tx  = 0.20   ,# complications with treated OVE   p_biopsy_death = 0.005  ,# probability of death due to biopsy      # Costs,   c_VE           = 1200   ,# cost of viral encephalitis care without complications   c_VE_comp      = 9000   ,# cost of viral encephalitis care with complications   c_tx           = 9500   ,# cost of treatment   c_biopsy       = 25000  ,# cost of brain biopsy      # QALYs,   q_VE           = 20     ,# remaining QALYs for those without VE-related complications   q_VE_comp      = 19     ,# remaining QALYs for those with VE-related complications   q_loss_biopsy  = 0.01   ,# one-time QALY loss due to brain biopsy   q_death_biopsy = 0      # remaining QALYs for those who died during biopsy )"},{"path":[]},{"path":"https://hjalal.github.io/twig/articles/decision_tree.html","id":"probability-of-death","dir":"Articles","previous_headings":"Functions","what":"Probability of death","title":"Decision Tree Herpes Virus Encephalopathy","text":"look death biopsy decision tree.","code":"pDie <- function(decision, p_biopsy_death){   p_biopsy_death * (decision == \"Biopsy\") }"},{"path":"https://hjalal.github.io/twig/articles/decision_tree.html","id":"probability-of-complications","dir":"Articles","previous_headings":"Functions","what":"Probability of complications","title":"Decision Tree Herpes Virus Encephalopathy","text":"depends whether treatment received , HVE vs. OVE, whether either HVE OVE complications occured.","code":"p_comp <- function(decision, HVE_event, p_HVE_comp, p_OVE_comp,                     p_HVE_comp_tx, p_OVE_comp_tx) {      # complication of untreated HVE     p_HVE_comp * (decision == \"DoNotTreat\" & HVE_event==\"yes\") +       # complication of untreated OVE     p_OVE_comp * (decision %in% c(\"DoNotTreat\", \"Biopsy\") & HVE_event==\"none\") +       # complications of treated HVE     p_HVE_comp_tx * (decision %in% c(\"Treat\", \"Biopsy\") & HVE_event==\"yes\") +       # complications of treated OVE     p_OVE_comp_tx * (decision == \"Treat\" & HVE_event==\"none\") }"},{"path":"https://hjalal.github.io/twig/articles/decision_tree.html","id":"probability-of-hve","dir":"Articles","previous_headings":"Functions","what":"Probability of HVE","title":"Decision Tree Herpes Virus Encephalopathy","text":"event probabilities must function names. , can just create simple wrapper around p_HVE variable.","code":"f_HVE <- function(p_HVE){   p_HVE }"},{"path":"https://hjalal.github.io/twig/articles/decision_tree.html","id":"cost-function","dir":"Articles","previous_headings":"Functions","what":"Cost function","title":"Decision Tree Herpes Virus Encephalopathy","text":"Cost function decision final model outcomes.","code":"cost <- function(decision, outcome, c_biopsy, c_tx, c_VE_comp, c_VE){     # cost of biopsy   c_biopsy*(decision==\"Biopsy\") +       # cost of treatment if treated or biopsy was +ve for HVE     c_tx*(decision==\"Treat\" | (decision==\"Biopsy\" & outcome %in% c(\"HVE_comp\", \"no_HVE_comp\"))) +       # cost of complication if outcomes are in either HVE or OVE complications     c_VE_comp*(outcome %in% c(\"HVE_comp\", \"OVE_comp\")) +       # cost of viral encephalitis if complications didn't occur     c_VE*(outcome %in% c(\"no_HVE_comp\", \"no_OVE_comp\"))  }"},{"path":"https://hjalal.github.io/twig/articles/decision_tree.html","id":"utility","dir":"Articles","previous_headings":"Functions","what":"utility","title":"Decision Tree Herpes Virus Encephalopathy","text":"function decision final outcome.","code":"utility <- function(decision, outcome, q_loss_biopsy, q_VE_comp, q_VE){    # apply utility discount for biopsy   -q_loss_biopsy*(decision==\"Biopsy\") +     # apply utility values for complications     q_VE_comp*(outcome %in% c(\"HVE_comp\", \"OVE_comp\")) +       # apply utility values if complications didn't occur     q_VE*(outcome %in% c(\"no_HVE_comp\", \"no_OVE_comp\")) }"},{"path":"https://hjalal.github.io/twig/articles/decision_tree.html","id":"running-the-twig","dir":"Articles","previous_headings":"","what":"Running the twig","title":"Decision Tree Herpes Virus Encephalopathy","text":"can run model check results single parameter set results$sim_ev","code":"results <- run_twig(twig_obj = mytwig, params = params, parallel = FALSE, progress_bar = FALSE) #> Checking Twig syntax .... #> A states layer was not detected - Treatign the twig as a Decision Tree. Event transitions include the following event names:  HVE_event, get_HVE_comp, get_OVE_comp . These are valid.  #> The following transitions are not event names and will be treated as final outcomes:  Death, HVE_comp, no_HVE_comp, OVE_comp, no_OVE_comp . #> Twig syntax validation completed successfully. #> Preprocessing started ... #> Preprocessing completed. Starting simulation... #>  #> Total time: 0.00064 secs  results$sim_ev #> , , sim = 1 #>  #>             payoff #> decision         cost  utility #>   DoNotTreat  4117.20 19.62600 #>   Treat      12908.96 19.71680 #>   Biopsy     32599.41 19.69896"},{"path":"https://hjalal.github.io/twig/articles/decision_tree.html","id":"incremental-cost-effectiveness-ratio-icer","dir":"Articles","previous_headings":"Running the twig","what":"Incremental Cost-Effectiveness Ratio (ICER)","title":"Decision Tree Herpes Virus Encephalopathy","text":"using calculate_icers function adapted dampack package, can retrieve ICER table passing payoffs summary table.","code":"calculate_icers(results$mean_ev) #>              decision     cost  utility inc_cost inc_utility     ICER status #> DoNotTreat DoNotTreat  4117.20 19.62600       NA          NA       NA     ND #> Treat           Treat 12908.96 19.71680  8791.76      0.0908 96825.55     ND #> Biopsy         Biopsy 32599.41 19.69896       NA          NA       NA      D"},{"path":"https://hjalal.github.io/twig/articles/decision_tree.html","id":"summary","dir":"Articles","previous_headings":"Running the twig","what":"Summary","title":"Decision Tree Herpes Virus Encephalopathy","text":"example illustrated following features twig * Decision tree * Multiple decisions * Multiple sequential events * probability dependency prior events * transition payoffs * using sequential events model complications * ICER addition, various intermediate objects computations can returned enabling verbose.","code":""},{"path":[]},{"path":"https://hjalal.github.io/twig/articles/markov_time_dep.html","id":"model-definition","dir":"Articles","previous_headings":"Twig","what":"model definition","title":"A Tutorial for Time Dependent Markov Model","text":", define model’s structure twig","code":"n_cycles <- 25 # number of cycles  mytwig <- twig() +    decisions(names = c(StandardOfCare, StrategyA, StrategyB, StrategyAB)) + # define decisions   states(names = c(H, S1, S2, D), # Markov state names          init_probs = c(1,0,0,0), # everyone starts at H          max_cycles = c(1,n_cycles, 1, 1)) + # the cohort can stay in S1 for n_cycles   event(name = death_event,  # first event is death         options = c(yes,none), # which 2 options         probs = c(pDie, leftover), # probability function name and its complement         transitions = c(D, second_event)) + # if death occurs go to D, otherwise, go to the next event (second_event)   event(name = second_event, # the second event         options = c(recover, getsick, progress, none), # has 4 options         probs = c(pRecover, pGetSick, pProgress, leftover), # and 3 named probabilities and a complement          transitions = c(H, S1, S2, stay)) + # resulting in transitions to H, S1, S2 or else staying in the original state   payoffs(names = c(cost, utility), # payoff names           discount_rates = c(0.03, 0.03)) # payoff discount rates #> Note: A states layer detected in your twig - treating Twig as a Markov model.  #>             For a decision tree, make sure to remove the states layer."},{"path":"https://hjalal.github.io/twig/articles/markov_time_dep.html","id":"decisiontwig","dir":"Articles","previous_headings":"Twig","what":"DecisionTwig","title":"A Tutorial for Time Dependent Markov Model","text":"DecisionTwig, Markov model looks like : Next, create data frame random samples model input parameters’ distributions","code":"n_sims <- 1000  # Create the data.table with n_sim rows of random samples params <- data.frame(   r_HS1         = rbeta(n_sims, 2, 10),             # Transition rate with beta distribution   r_S1H         = rbeta(n_sims, 5, 5),              # Another transition rate with a different shape   hr_S1         = rlnorm(n_sims, log(3), 0.2),      # Hazard ratio, log-normal to allow skewness   hr_S2         = rlnorm(n_sims, log(10), 0.2),     # Higher hazard ratio, same distribution    hr_S1S2_trtB  = rbeta(n_sims, 6, 4),              # Hazard ratio under treatment with beta distribution    r_S1S2_scale  = rgamma(n_sims, shape = 2, rate = 25), # Scale parameter, gamma distribution   r_S1S2_shape  = rgamma(n_sims, shape = 3, rate = 3),  # Shape parameter, gamma distribution    c_H           = rnorm(n_sims, mean = 2000, sd = 50),   # Annual cost, slight variation for simulation   c_S1          = rnorm(n_sims, mean = 4000, sd = 100),  # Higher annual cost, slightly varied   c_S2          = rnorm(n_sims, mean = 15000, sd = 500), # Large cost with moderate variation   c_D           = 0,                                        # Constant, no variation   c_trtA        = rnorm(n_sims, mean = 12000, sd = 200), # Cost of treatment A with small variation   c_trtB        = rnorm(n_sims, mean = 13000, sd = 200), # Cost of treatment B    u_H           = rbeta(n_sims, 10, 1),                  # Utility close to 1 for Healthy   u_S1          = rbeta(n_sims, 7.5, 2.5),               # Utility less than Healthy, beta distribution   u_S2          = rbeta(n_sims, 5, 5),                   # Utility for Sicker   u_D           = 0,                                        # Utility for Dead is constant   u_trtA        = rbeta(n_sims, 9.5, 1),                 # Utility with treatment A, close to Healthy    du_HS1        = rnorm(n_sims, mean = 0.01, sd = 0.005), # Disutility with slight variation   ic_HS1        = rnorm(n_sims, mean = 1000, sd = 100),   # Cost increase with transition   ic_D          = rnorm(n_sims, mean = 2000, sd = 100),    # Cost increase when dying   p0_H          = rbeta(n_sims, 1, 9)                   # Initial probability of being Healthy )"},{"path":"https://hjalal.github.io/twig/articles/markov_time_dep.html","id":"probability-and-payoff-functions","dir":"Articles","previous_headings":"","what":"Probability and Payoff Functions","title":"A Tutorial for Time Dependent Markov Model","text":", define probability payoff functions used twig :","code":""},{"path":"https://hjalal.github.io/twig/articles/markov_time_dep.html","id":"probability-of-recovery","dir":"Articles","previous_headings":"Probability and Payoff Functions","what":"Probability of recovery","title":"A Tutorial for Time Dependent Markov Model","text":"S1 can recover","code":"pRecover <- function(state, r_S1H){   rRecover <- r_S1H * (state==\"S1\")    rate2prob(rRecover) }"},{"path":"https://hjalal.github.io/twig/articles/markov_time_dep.html","id":"probability-of-getting-sick","dir":"Articles","previous_headings":"Probability and Payoff Functions","what":"Probability of getting sick","title":"A Tutorial for Time Dependent Markov Model","text":"H can get sick","code":"pGetSick <- function(state, r_HS1){   rGetSick <- r_HS1 * (state==\"H\")   rate2prob(rGetSick) }"},{"path":"https://hjalal.github.io/twig/articles/markov_time_dep.html","id":"probability-of-progressing","dir":"Articles","previous_headings":"Probability and Payoff Functions","what":"probability of progressing","title":"A Tutorial for Time Dependent Markov Model","text":"depends state (S1 can progress), decision (different rates different decisions), cycle_in_state (number cycles spent state - tunnel state)","code":"pProgress <- function(state, decision, cycle_in_state,                       hr_S1S2_trtB, r_S1S2_scale, r_S1S2_shape){      hr_S1S2 <- hr_S1S2_trtB ^ (decision %in% c(\"StrategyB\", \"StrategyAB\")) # hazard rate of progression for B or 1 otherwise    r_S1S2_tunnels <- ((cycle_in_state*r_S1S2_scale)^r_S1S2_shape -      ((cycle_in_state - 1)*r_S1S2_scale)^r_S1S2_shape) # hazard rate based on cycle_in_state (tunnel) which follows a weibull distribution    # only those who are at S1 can progress   rProgress <- r_S1S2_tunnels * (state==\"S1\") * hr_S1S2     rate2prob(rProgress) }"},{"path":"https://hjalal.github.io/twig/articles/markov_time_dep.html","id":"probability-of-dying","dir":"Articles","previous_headings":"Probability and Payoff Functions","what":"probability of dying","title":"A Tutorial for Time Dependent Markov Model","text":"Probabilty dying depends age. , first extract age-specific mortality data csv file. , define pDie function state (different states different rates death), cycles since simulation start reflects cohort’s age.","code":"n_age_init <- 24 # starting age  n_age_max  <- 100 # maximum age of simulation  # Age-dependent mortality rates  lt_usa_2015 <- read.csv(\"../inst/extdata/LifeTable_USA_Mx_2015.csv\")  # choose mortality rates from the  v_r_mort_by_age <- as.matrix(lt_usa_2015$Total[lt_usa_2015$Age >= n_age_init & lt_usa_2015$Age < n_age_max])  # death depends on the state and age. pDie <- function(state, cycle,                  hr_S1, hr_S2){   r_HD <- v_r_mort_by_age[cycle] # get age-specific mortality    rDie <- r_HD * (state==\"H\") +  # baseline mortality if healthy           r_HD*hr_S1 * (state==\"S1\") +  # multiplied by a hazard rate if S1 or            r_HD*hr_S2 * (state==\"S2\") # S2           # else 0   rate2prob(rDie) }"},{"path":"https://hjalal.github.io/twig/articles/markov_time_dep.html","id":"cost","dir":"Articles","previous_headings":"Probability and Payoff Functions","what":"Cost","title":"A Tutorial for Time Dependent Markov Model","text":"Cost function state, decision whether either event occured. events capture transition costs.","code":"cost <- function(state, decision, second_event, death_event,                   ic_HS1, ic_D, c_trtA, c_trtB,                   c_H, c_S1, c_S2, c_D){   # cost of decision is only applied if the state is either S1 or S2   trans_cost_getting_sick <- ic_HS1 * (second_event==\"getsick\") # increase in cost when transitioning from Healthy to Sick   trans_cost_dying <- ic_D * (death_event==\"yes\") # increase in cost when dying      c_decision <- (state %in% c(\"S1\",\"S2\")) * (       c_trtA * (decision==\"StrategyA\") +       c_trtB * (decision==\"StrategyB\") +       (c_trtA + c_trtB) * (decision==\"StrategyAB\")    )      # cost of the state is a function of the state   c_state <- c_H * (state==\"H\") +               c_S1 * (state==\"S1\") +               c_S2 * (state==\"S2\") +               c_D * (state==\"D\")    # combine both   return(c_decision + c_state + trans_cost_getting_sick + trans_cost_dying) }"},{"path":"https://hjalal.github.io/twig/articles/markov_time_dep.html","id":"utility","dir":"Articles","previous_headings":"Probability and Payoff Functions","what":"Utility","title":"A Tutorial for Time Dependent Markov Model","text":"Similarly, utility depends state, decision cohort gotsick apply transition utility discount make transition.","code":"utility <- function(state, decision, second_event,                     du_HS1, u_H, u_trtA, u_S1, u_S2, u_D){    trans_util_getting_sick <- -du_HS1 * (second_event==\"getsick\") # apply a utility discount for those who get sick.    # calcualte state utilities. note that S1 will have utility u_trtA if the decision involves A, and another utility if the decision does not involve A.   u_state <- u_H * (state==\"H\") +               u_trtA * (state==\"S1\" & decision %in% c(\"StrategyA\", \"StrategyAB\")) +              u_S1 * (state==\"S1\" & decision %out% c(\"StrategyA\", \"StrategyAB\")) +               u_S2 * (state==\"S2\") +               u_D * (state==\"D\")     # combine the two utilities.   return(u_state + trans_util_getting_sick) }"},{"path":"https://hjalal.github.io/twig/articles/markov_time_dep.html","id":"running-the-twig","dir":"Articles","previous_headings":"","what":"Running the twig","title":"A Tutorial for Time Dependent Markov Model","text":"can run model check summary results results$mean_ev average costs utilities across probabilistic analyses. results also returns individual simulation results results$sim_ev","code":"results <- run_twig(twig_obj = mytwig, params = params, n_cycles = n_cycles, progress_bar = FALSE) #> Checking Twig syntax .... #> Twig syntax validation completed successfully. #> Preprocessing started... #> Preprocessing completed. Starting simulation... #>  #> Total time: 4.2 secs  results$mean_ev #>                 payoff #> decision              cost  utility #>   StandardOfCare  80161.74 13.95844 #>   StrategyA      152013.97 14.44080 #>   StrategyB      140915.32 14.34537 #>   StrategyAB     206832.28 14.89491"},{"path":"https://hjalal.github.io/twig/articles/markov_time_dep.html","id":"parallelization","dir":"Articles","previous_headings":"Running the twig","what":"Parallelization","title":"A Tutorial for Time Dependent Markov Model","text":"can run command parallelization, setting parallel = TRUE. speed simulation running simulation parallel. [commented testing twig package runs single core.]","code":"# results <- run_twig(twig_obj = mytwig, params = params, n_cycles = n_cycles, parallel = TRUE)"},{"path":"https://hjalal.github.io/twig/articles/markov_time_dep.html","id":"incremental-cost-effectiveness-ratio-icer","dir":"Articles","previous_headings":"Running the twig","what":"Incremental Cost-Effectiveness Ratio (ICER)","title":"A Tutorial for Time Dependent Markov Model","text":"using calculate_icers function adapted dampack package, can retrieve ICER table passing payoffs summary table.","code":"calculate_icers(results$mean_ev) #>                      decision      cost  utility inc_cost inc_utility   ICER #> StandardOfCare StandardOfCare  80161.74 13.95844       NA          NA     NA #> StrategyB           StrategyB 140915.32 14.34537       NA          NA     NA #> StrategyA           StrategyA 152013.97 14.44080       NA          NA     NA #> StrategyAB         StrategyAB 206832.28 14.89491 126670.5   0.9364688 135264 #>                status #> StandardOfCare     ND #> StrategyB          ED #> StrategyA          ED #> StrategyAB         ND"},{"path":"https://hjalal.github.io/twig/articles/markov_time_dep.html","id":"cost-effectiveness-acceptibility-curve-ceac","dir":"Articles","previous_headings":"Running the twig","what":"Cost-Effectiveness Acceptibility Curve (CEAC)","title":"A Tutorial for Time Dependent Markov Model","text":"Similarly, can produce CEAC curve simulation results specifying series willingness pay (WTP) values.","code":"plot_ceac(results$sim_ev, wtp_range = seq(0, 100000, by = 1000))"},{"path":"https://hjalal.github.io/twig/articles/markov_time_dep.html","id":"summary","dir":"Articles","previous_headings":"Running the twig","what":"Summary","title":"A Tutorial for Time Dependent Markov Model","text":"example illustrated following features twig * Markov model * probabilistic anslysis * Multiple decisions * Multiple states * Multiple sequential events * tunnel states * cycle-dependency * dependency prior events cycle * transition payoffs * using parallel computations * expected payoffs across probabilistic analyses * ICER * CEAC addition, various intermediate objects computations can returned enabling verbose. reduce size returned results, use first PSA sample. details objects check documentations.","code":""},{"path":"https://hjalal.github.io/twig/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hawre Jalal. Author, maintainer.","code":""},{"path":"https://hjalal.github.io/twig/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jalal H (2025). twig: Streamlining Decision Economic Evaluation Models using Grammar Modeling. R package version 1.0.0.0, https://hjalal.github.io/twig/, https://www.dashlab.ca/projects/decision_twig/, https://www.dashlab.ca/.","code":"@Manual{,   title = {twig: For Streamlining Decision and Economic Evaluation Models using Grammar of Modeling},   author = {Hawre Jalal},   year = {2025},   note = {R package version 1.0.0.0, https://hjalal.github.io/twig/, https://www.dashlab.ca/projects/decision_twig/},   url = {https://www.dashlab.ca/}, }"},{"path":[]},{"path":"https://hjalal.github.io/twig/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Home","text":"twig R package building decision cost-effectiveness analyses. provide instructions install twig R package, simple Markov model example, reference two cost-effectivenss tutorials, one time-dependent Markov model decision tree. building twig syntax interactively, can use DecisionTwig online graphical user interface developing twig syntax.","code":""},{"path":"https://hjalal.github.io/twig/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Home","text":"CRAN version soon available. Meanwhile, install twig GitHub, use following command R:","code":"library(devtools) install_github(\"hjalal/twig\")"},{"path":"https://hjalal.github.io/twig/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Home","text":"twig streamlines process building models defining Grammar Modeling inspired Grammar Graphics used ggplot2 package. twig leverages vectorized operations efficiency.","code":""},{"path":"https://hjalal.github.io/twig/index.html","id":"a-minimal-example","dir":"","previous_headings":"","what":"A minimal example:","title":"Home","text":"Consider twig syntax: concept Grammar Modeling insipred ggplot’s Grammar Graphics. key benefit adopting grammar minimize repetition decision cost-effectiveness analysis modeling streamline model building, maintenance debugging. twig consists decisions layer includes names alternative strategies choices, states layer describes Markov states initial probabilities, event layer die_event, finally payoffs layer describing payoffs accumulated. key component Grammar Modeling develop generic sequence events twig applies entire population. flow events can controlled probability functions probs can depend decision, state, cycle age dependency, cycle_in_state tunnels, prior events twig.","code":"library(twig) mytwig <- twig() +    decisions(names = c(\"A\", \"B\")) +  # Decision alternatives   states(names = c(\"Alive\", \"Dead\"),  # Markov state names          init_probs = c(1, 0)) +  # The cohort starts healthy   event(name = \"death_event\",  # A death event can            options = c(\"yes\", \"none\"),  # have two options: \"yes\" and \"none\",         probs = c(pDie, leftover),  # occur with probabilities: pDie and leftover = 1 - pDie         transitions=c(Dead,stay)) + # can lead to death state otherwise stay in their current state, respectively.   payoffs(names = c(cost, utility))  # Payoff function names"},{"path":"https://hjalal.github.io/twig/index.html","id":"decisiontwig","dir":"","previous_headings":"","what":"DecisionTwig","title":"Home","text":"DecisionTwig, twig look like  DecisionTwig allows interactively build twig syntax. can especially helpful complex event sequence structure.","code":""},{"path":"https://hjalal.github.io/twig/index.html","id":"probability-and-payoff-functions","dir":"","previous_headings":"","what":"Probability and payoff functions","title":"Home","text":"Next, define three functions used twig: pDie, cost utility. Note functions vectorized, meaning can take vector states, decisions, parameters return vector probabilities, costs, utilities. key feature twig allows efficient computation model across multiple simulations. use concise way define statements. example, cA * (decision==\"\") equivalent ifelse(decision==\"\", cA, 0). statements vectorized can take vector decisions return vector costs. However, former concise easier read avoids nesting multiple ifelse statements. also used rrMortA^(decision==\"\") apply relative risk mortality decision , otherwise 1. decision==\"\" treated 1, decision!=\"\" treated 0. combining * ^ can concisely express multiple conditional statements.","code":"# 1. probability of death is a function of the state, decision and relative risk of mortality given treatment A pDie <- function(state, decision, rrMortA){   rDie <- 0.01*(state==\"Alive\") * rrMortA^(decision==\"A\") # rate of death is 20% if alive, 0 otherwise. This rate is multiplied by rrMortA for A, otherwise 1.   rate2prob(rDie) # convert the rate into probability }  # 2. cost is a function of the decision cost <- function(decision, cA, cB){   cA * (decision==\"A\") + # if A, 0 otherwise   cB * (decision==\"B\") # if B, 0 otherwise }  # 3. utility is uAlive if alive, otherwise 0 utility <- function(state, uAlive){   uAlive * (state==\"Alive\") # only if alive 0 otherwise }"},{"path":"https://hjalal.github.io/twig/index.html","id":"parameters","dir":"","previous_headings":"","what":"Parameters","title":"Home","text":", can create probabilistic dataframe parameter samples: twig also accepts list parameter scalar values. Lastly, run model 50 cycles (years) compute average expected values (EV) costs utilities strategies. Note results may slightly different due randomness params.","code":"n_sims <- 1000 # number of simulations  psa_params <- data.frame(   rrMortA = rnorm(n_sims, 0.9, 0.1), # Normal: relative risk of mortality for A vs. B   cA = rlnorm(n_sims, 6, 1), # Log-normal: cost of A   cB = rlnorm(n_sims, 5, 1), # Log-normal: cost of B   uAlive = rbeta(n_sims, 0.8, 0.2)) # Beta: utility of being alive  head(psa_params) # examining the first 6 samples  #     rrMortA         cA        cB    uAlive # 1 1.0168738 1270.91187  34.93591 0.9999919 # 2 0.8952317 1433.50158 351.25445 0.9497743 # 3 0.7524302   90.52039 273.80137 0.9999980 # 4 0.8276866  245.09993 488.33008 0.9805013 # 5 0.8751724   52.21374 219.23235 0.8402547 # 6 0.9473632  396.90634 112.18042 0.9991721 results <- run_twig(twig_obj = mytwig, params = psa_params, n_cycles = 50)  results$mean_ev #average across all simulations #         payoff # decision     cost  utility #        A 32379.32 32.11033 #        B 12503.32 31.32062"},{"path":"https://hjalal.github.io/twig/index.html","id":"incremental-cost-effectiveness-ratio-icer","dir":"","previous_headings":"","what":"Incremental Cost-Effectiveness Ratio (ICER):","title":"Home","text":"can produce incremental cost-effectiveness ratio (ICER) adapting dampack’s calculate_icer function: ND = dominated","code":"# calculate_icers(results$mean_ev) #   decision     cost  utility inc_cost inc_utility     ICER status # B        B 12503.32 31.32062       NA          NA       NA     ND # A        A 32379.32 32.11033 19875.99   0.7897148 25168.57     ND"},{"path":"https://hjalal.github.io/twig/index.html","id":"cost-effectiveness-acceptability-curve-ceac","dir":"","previous_headings":"","what":"Cost-Effectiveness Acceptability Curve (CEAC):","title":"Home","text":"can also plot cost-effectiveness acceptability curve (CEAC) using range willingness pay (WTP) thresholds using plot_ceac function:  brief tutorial demonstrated basic functionality twig package simple Markov model. shows define basic twig, define probabilistic input data, run model, create ICER table, produce CEAC curves. illustrate advanced functionality twig, provide two vignettes, one time-dependent Markov model decision tree.","code":"plot_ceac(results$sim_ev, wtp_range = seq(0, 100000, by = 1000))"},{"path":"https://hjalal.github.io/twig/index.html","id":"additional-resources","dir":"","previous_headings":"","what":"Additional Resources:","title":"Home","text":"Time-dependent Markov model using sick-sicker model illustrates following features: transition probabilities dependent decisions states transition probabilities dependent simulation time (.e., Markov cycle) transition probabilities dependent state residency (.e., cycle Markov state) tunnels transition probabilities dependent prior events sequence events within cycle payoffs dependent decisions states payoffs dependent events payoff discounting parallel computation Decision-tree illustrating cost-effectiveness herpes simplex encephalopathy building decision tree multiple sequential events event probabilities dependent decisions event probabilities depending prior events sequence events define final outcomes decision tree payoff dependent decisions payoff dependency events final outcomes","code":""},{"path":"https://hjalal.github.io/twig/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Home","text":"Please note DecisionTwig twig still active development provided -without warranty.","code":""},{"path":"https://hjalal.github.io/twig/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Home","text":"project licensed GPL v3 International.","code":""},{"path":"https://hjalal.github.io/twig/index.html","id":"suggested-citations","dir":"","previous_headings":"","what":"Suggested citations:","title":"Home","text":"Jalal, H. (2024). Grammar Modelling, twig R package. Retrieved https://github.com/hjalal/twig Jalal, H. (2024). DecisionTwig. Retrieved https://www.dashlab.ca/projects/decision_twig/","code":""},{"path":"https://hjalal.github.io/twig/reference/calculate_icers.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Incremental Cost-Effectiveness Ratios (ICERs) — calculate_icers","title":"Calculate Incremental Cost-Effectiveness Ratios (ICERs) — calculate_icers","text":"function calculates Incremental Cost-Effectiveness Ratios (ICERs) set strategies based costs effects.","code":""},{"path":"https://hjalal.github.io/twig/reference/calculate_icers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Incremental Cost-Effectiveness Ratios (ICERs) — calculate_icers","text":"","code":"calculate_icers(payoffs_summary, col_names = c(\"cost\", \"utility\"))"},{"path":"https://hjalal.github.io/twig/reference/calculate_icers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Incremental Cost-Effectiveness Ratios (ICERs) — calculate_icers","text":"payoffs_summary matrix data frame containing summary statistics payoffs. must columns cost utility. col_names character vector specifying names columns cost utility. Default c(\"cost\", \"utility\").","code":""},{"path":"https://hjalal.github.io/twig/reference/calculate_icers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Incremental Cost-Effectiveness Ratios (ICERs) — calculate_icers","text":"data frame following columns: decision: name strategy. cost: cost strategy. utility: effect (utility) strategy. inc_cost: incremental cost compared next less effective strategy. inc_utility: incremental effect compared next less effective strategy. ICER: Incremental Cost-Effectiveness Ratio. status: dominance status strategy (ND = non-dominated, D = dominated, ED = extendedly dominated).","code":""},{"path":"https://hjalal.github.io/twig/reference/calculate_icers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Incremental Cost-Effectiveness Ratios (ICERs) — calculate_icers","text":"","code":"payoffs_summary <- matrix(c(100, 200, 0.5, 0.7), ncol = 2,                            dimnames = list(c(\"Strategy A\", \"Strategy B\"),                                            c(\"cost\", \"utility\"))) calculate_icers(payoffs_summary) #>              decision cost utility inc_cost inc_utility ICER status #> Strategy A Strategy A  100     0.5       NA          NA   NA     ND #> Strategy B Strategy B  200     0.7      100         0.2  500     ND"},{"path":"https://hjalal.github.io/twig/reference/decisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add decisions to a twig — decisions","title":"Add decisions to a twig — decisions","text":"Add decisions twig","code":""},{"path":"https://hjalal.github.io/twig/reference/decisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add decisions to a twig — decisions","text":"","code":"decisions(names)"},{"path":"https://hjalal.github.io/twig/reference/decisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add decisions to a twig — decisions","text":"names decision names, character vector decision names.  need included quotes.","code":""},{"path":"https://hjalal.github.io/twig/reference/decisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add decisions to a twig — decisions","text":"twig layer decision names","code":""},{"path":"https://hjalal.github.io/twig/reference/decisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add decisions to a twig — decisions","text":"","code":"decisions(names = c(A, B, C)) #> $type #> [1] \"decisions\" #>  #> $decisions #> [1] \"A\" \"B\" \"C\" #>  decisions(names = c(\"A\", \"B\", \"C\")) #> $type #> [1] \"decisions\" #>  #> $decisions #> [1] \"A\" \"B\" \"C\" #>"},{"path":"https://hjalal.github.io/twig/reference/event.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an event layer to a twig object — event","title":"Add an event layer to a twig object — event","text":"function creates event layer can added twig object. event layer defines possible outcomes event, probabilities, transitions states.","code":""},{"path":"https://hjalal.github.io/twig/reference/event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an event layer to a twig object — event","text":"","code":"event(name, options, probs, transitions)"},{"path":"https://hjalal.github.io/twig/reference/event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an event layer to a twig object — event","text":"name character string representing name event. need quoted. options character vector possible outcomes event. need included quotes. One options must none. probs character vector probability function names outcome. need included quotes. One can leftover remaining probability. transitions character vector state transitions corresponding outcome. need included quotes. event names states states layer defined. One can stay Markov state remain .","code":""},{"path":"https://hjalal.github.io/twig/reference/event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an event layer to a twig object — event","text":"list representing event layer.","code":""},{"path":"https://hjalal.github.io/twig/reference/event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an event layer to a twig object — event","text":"","code":"#' # Adding the event layer to a twig object twig_obj <- twig() + event(name = event_progress,                             options = c(yes, none),                             probs = c(pProgress, leftover),                             transitions = c(Severe, stay))  event_layer <- event(name = \"event_progress\",                       options = c(\"yes\", \"none\"),                       probs = c(pProgress, leftover),                       transitions = c(\"Severe\", \"stay\"))"},{"path":"https://hjalal.github.io/twig/reference/grapes-out-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Negation of %in% operator — %out%","title":"Negation of %in% operator — %out%","text":"function checks elements vector another vector.","code":""},{"path":"https://hjalal.github.io/twig/reference/grapes-out-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negation of %in% operator — %out%","text":"","code":"x %out% table"},{"path":"https://hjalal.github.io/twig/reference/grapes-out-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negation of %in% operator — %out%","text":"x vector values checked. table vector values compared .","code":""},{"path":"https://hjalal.github.io/twig/reference/grapes-out-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negation of %in% operator — %out%","text":"logical vector indicating elements x table.","code":""},{"path":"https://hjalal.github.io/twig/reference/grapes-out-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Negation of %in% operator — %out%","text":"","code":"x <- c(\"A\", \"B\", \"C\") table <- c(\"B\", \"C\", \"D\") x %out% table #> [1]  TRUE FALSE FALSE"},{"path":"https://hjalal.github.io/twig/reference/payoffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add payoffs to a twig object — payoffs","title":"Add payoffs to a twig object — payoffs","text":"function creates payoffs layer can added twig object. payoffs layer defines payoffs associated discount rates.","code":""},{"path":"https://hjalal.github.io/twig/reference/payoffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add payoffs to a twig object — payoffs","text":"","code":"payoffs(names, discount_rates = NULL)"},{"path":"https://hjalal.github.io/twig/reference/payoffs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add payoffs to a twig object — payoffs","text":"names character vector payoff function names.  need included quotes. discount_rates numeric vector discount rates payoff. NULL, discount rate 0 assumed payoff. discount_rates must length payoff names.","code":""},{"path":"https://hjalal.github.io/twig/reference/payoffs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add payoffs to a twig object — payoffs","text":"list representing payoffs layer.","code":""},{"path":"https://hjalal.github.io/twig/reference/payoffs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add payoffs to a twig object — payoffs","text":"","code":"payoffs_layer <- payoffs(names = c(cost, effectiveness), discount_rates = c(0.03, 0.03))"},{"path":"https://hjalal.github.io/twig/reference/plot_ceac.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Cost-Effectiveness Acceptability Curve (CEAC) — plot_ceac","title":"Plot Cost-Effectiveness Acceptability Curve (CEAC) — plot_ceac","text":"function plots Cost-Effectiveness Acceptability Curve (CEAC) set strategies based costs utilities.","code":""},{"path":"https://hjalal.github.io/twig/reference/plot_ceac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Cost-Effectiveness Acceptability Curve (CEAC) — plot_ceac","text":"","code":"plot_ceac(payoffs_sim, wtp_range, col_names = c(\"cost\", \"utility\"))"},{"path":"https://hjalal.github.io/twig/reference/plot_ceac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Cost-Effectiveness Acceptability Curve (CEAC) — plot_ceac","text":"payoffs_sim 3D array containing simulated payoffs. dimensions decision, payoff (cost utility), simulation. wtp_range numeric vector specifying range willingness pay (WTP) thresholds. col_names character vector specifying names columns cost utility. Default c(\"cost\", \"utility\").","code":""},{"path":"https://hjalal.github.io/twig/reference/plot_ceac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Cost-Effectiveness Acceptability Curve (CEAC) — plot_ceac","text":"ggplot object representing CEAC.","code":""},{"path":"https://hjalal.github.io/twig/reference/plot_ceac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Cost-Effectiveness Acceptability Curve (CEAC) — plot_ceac","text":"","code":"# Example payoffs simulation array payoffs_sim <- array(   data = c(1000, 2000, 1500, 0.8, 0.85, 0.82, 1000, 2000, 1500, 0.8, 0.85, 0.82),   dim = c(3, 2, 2),   dimnames = list(c(\"StrategyA\", \"StrategyB\", \"StrategyC\"), c(\"cost\", \"utility\"), NULL) )  # Define WTP range wtp_range <- seq(0, 100000, by = 1000)  # Plot CEAC ceac_plot <- plot_ceac(payoffs_sim, wtp_range) print(ceac_plot)"},{"path":"https://hjalal.github.io/twig/reference/plus-.twig_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a method for the + operator for twig objects — +.twig_class","title":"Define a method for the + operator for twig objects — +.twig_class","text":"Adds layers twig object. states layer added, twig object treated Markov model.","code":""},{"path":"https://hjalal.github.io/twig/reference/plus-.twig_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a method for the + operator for twig objects — +.twig_class","text":"","code":"# S3 method for class 'twig_class' twig_obj + layer"},{"path":"https://hjalal.github.io/twig/reference/plus-.twig_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a method for the + operator for twig objects — +.twig_class","text":"twig_obj twig object created twig function. layer layer added twig object.","code":""},{"path":"https://hjalal.github.io/twig/reference/plus-.twig_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a method for the + operator for twig objects — +.twig_class","text":"modified twig object new layer added.","code":""},{"path":"https://hjalal.github.io/twig/reference/plus-.twig_class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a method for the + operator for twig objects — +.twig_class","text":"method allows layers added twig object using + operator.","code":""},{"path":"https://hjalal.github.io/twig/reference/plus-.twig_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a method for the + operator for twig objects — +.twig_class","text":"","code":"twig_obj <- twig() +    decisions(names = c(StandardOfCare, StrategyA, StrategyB, StrategyAB))"},{"path":"https://hjalal.github.io/twig/reference/prob2rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Probability to Rate — prob2rate","title":"Convert Probability to Rate — prob2rate","text":"function converts probability rate using formula -log(1 - prob).","code":""},{"path":"https://hjalal.github.io/twig/reference/prob2rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Probability to Rate — prob2rate","text":"","code":"prob2rate(prob)"},{"path":"https://hjalal.github.io/twig/reference/prob2rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Probability to Rate — prob2rate","text":"prob numeric value representing probability.","code":""},{"path":"https://hjalal.github.io/twig/reference/prob2rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Probability to Rate — prob2rate","text":"numeric value representing rate.","code":""},{"path":"https://hjalal.github.io/twig/reference/prob2rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Probability to Rate — prob2rate","text":"","code":"prob <- 0.1 rate <- prob2rate(prob) print(rate) #> [1] 0.1053605"},{"path":"https://hjalal.github.io/twig/reference/rate2prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Rate to Probability — rate2prob","title":"Convert Rate to Probability — rate2prob","text":"function converts rate probability using formula 1 - exp(-rate).","code":""},{"path":"https://hjalal.github.io/twig/reference/rate2prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Rate to Probability — rate2prob","text":"","code":"rate2prob(rate)"},{"path":"https://hjalal.github.io/twig/reference/rate2prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Rate to Probability — rate2prob","text":"rate numeric value representing rate.","code":""},{"path":"https://hjalal.github.io/twig/reference/rate2prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Rate to Probability — rate2prob","text":"numeric value representing probability.","code":""},{"path":"https://hjalal.github.io/twig/reference/rate2prob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Rate to Probability — rate2prob","text":"","code":"rate <- 0.1 prob <- rate2prob(rate) print(prob) #> [1] 0.09516258"},{"path":"https://hjalal.github.io/twig/reference/run_twig.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a twig model — run_twig","title":"Run a twig model — run_twig","text":"function runs twig model, currently can either decision tree Markov model.","code":""},{"path":"https://hjalal.github.io/twig/reference/run_twig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a twig model — run_twig","text":"","code":"run_twig(   twig_obj,   params,   n_cycles = NULL,   verbose = FALSE,   parallel = FALSE,   offset_trace_cycle = 1,   ncore = NULL,   progress_bar = TRUE )"},{"path":"https://hjalal.github.io/twig/reference/run_twig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a twig model — run_twig","text":"twig_obj twig object created twig function. params data frame list parameters used model. n_cycles integer specifying number cycles Markov model. Default NULL. verbose logical value indicating whether print detailed output. Default FALSE. parallel logical value indicating whether run model parallel. Default FALSE. offset_trace_cycle integer specifying offset trace cycle. Default 1. used adjust cycle number trace output. set 0, initial state distribution used first cycle. set 1, initial state distribution ignored Markov trace. situations, total number cycles input n_cycles. ncore integer specifying number cores use parallel processing. Default total number cores - 1. progress_bar logical value indicating whether display progress bar. Default TRUE.","code":""},{"path":"https://hjalal.github.io/twig/reference/run_twig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a twig model — run_twig","text":"list containing results model run. list includes following elements: mean_ev matrix size decision x payoff containing mean expected values (EV)s across simulations params data.frame 1 row. sim_ev array size decision x payoff x simulation containing simulated expected values (EV) simulation. following also returned verbose TRUE Markov models: sim: simulation ID.  params dataset, first simulation used (sim = 1). evaluated_funs: list dataframes evaluated functions. function returns data frame enumerating dependencies function along value returned function combination values. evaluated_prob_funs_combined: data frame containing evaluated probability function values state, cycle, decision, event merged single dataframe. path_event_options: data frame event options along path. Rows = paths, columns = event_options. path_probs: data frame containing path probabilities state, cycle, decision. event_probs: data frame containing event options along path destination. markov_trans_probs: array containing transition probabilities origin state, destination state, cycle, decision. markov_trace: array containing Markov trace cycle, state, decision. cycle_payoffs: array containing payoffs cycle, state, decision, payoff. cycle_ev: array containing Expected Value (EV) cycle, state, decision payoff. cycle_ev = markov_trace * cycle_payoffs. sim_ev: matrix total expected values (EV) size decision x payoffs. mean_ev: matrix mean expected values (EV) across simulations. Since single simulation, mean_ev = sim_ev. following also returned verbose TRUE decision trees: sim: simulation ID. params dataset, first simulation used (sim = 1). evaluated_funs: list dataframes evaluated functions. function returns data frame enumerating dependencies function along value returned function combination values. evaluated_prob_funs_combined: data frame probability function values evaluated decision events harmonized combinations decisions events across probability functions. event_probs: data frame containing probability event options decision. outcome_probs: matrix outcome probabilities. Outcomes terminal event transitions size decision x outcomes. path_event_options: data frame event options along path. Rows = paths, columns = events. path_probs: matrix containing path probabilities size decision x paths. path_payoffs: array containing path payoffs size decision x paths x payoffs. Paths indexed final outcomes twig key event options provided path_event_options. path_ev: array containing path expected values (EV) = path_probs x path_payoffs. also size decision x paths x payoffs. sim_ev: matrix total expected values (EV) size decision x payoffs. mean_ev: matrix mean expected values (EV) across simulations. Since single simulation, mean_ev = sim_ev.","code":""},{"path":[]},{"path":"https://hjalal.github.io/twig/reference/run_twig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a twig model — run_twig","text":"","code":"library(twig)  # define a Markov model twig mytwig <- twig() +   decisions(names = c(A,B)) +   states(names = c(H,D),          init_probs = c(1,0)) +   event(name = death_event,         options = c(yes, none),         probs = c(pDie, leftover),         transitions = c(D, stay)) +   payoffs(names = c(utility)) #> Note: A states layer detected in your twig - treating Twig as a Markov model.  #>             For a decision tree, make sure to remove the states layer.  # define the parameters params <- list(prob_die = 0.1, rrA = 0.9)  # define vectorized functions pDie <- function(decision, state, prob_die, rrA){   # prob death is 0.1 if healthy and 0 otherwise   prob_die * (state==\"H\") *     # multiplied by a relative risk of 0.9 if the decision is A, and 1 otherwise     rrA ^ (decision==\"A\") }  utility <- function(state){   1 * (state==\"H\") # utility is 1 if healthy and 0 otherwise }  # run the model for 10 cycles run_twig(mytwig, params = params, n_cycles = 10) #> Checking Twig syntax ....  #> Note: The following states are not included as event transitions: H #> Twig syntax validation completed successfully. #> Preprocessing started... #> Error: The following function(s) are used in the twig but are not defined: pDie  # see the vignettes for more examples"},{"path":"https://hjalal.github.io/twig/reference/states.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Markov states to a twig — states","title":"Add Markov states to a twig — states","text":"Add Markov states twig","code":""},{"path":"https://hjalal.github.io/twig/reference/states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Markov states to a twig — states","text":"","code":"states(names, init_probs, max_cycles = NULL)"},{"path":"https://hjalal.github.io/twig/reference/states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Markov states to a twig — states","text":"names ... character vector Markov state names. need included quotes. init_probs ... vector initial probs, numeric function names. functions can depend decision variables params list dataframe. One can leftover remaining probability event. init_probs must length state names. max_cycles ... optional max tunnel lenghts (tunnel length). defines duration allowable state. ignored length 1 assumed. #' max_cycles provided must length state names.","code":""},{"path":"https://hjalal.github.io/twig/reference/states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Markov states to a twig — states","text":"twig layer Markov state names","code":""},{"path":"https://hjalal.github.io/twig/reference/states.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Markov states to a twig — states","text":"","code":"states(names = c(H,S,D),                   init_probs = c(0.5, prob_fun, leftover),                  max_cycles = c(1, 2, 1))  #> $type #> [1] \"states\" #>  #> $names #> [1] \"H\" \"S\" \"D\" #>  #> $init_probs #> [1] 0.5      prob_fun leftover #>  #> $max_cycles #> [1] 1 2 1 #>  #> $expanded_init_probs #> [1] \"0.5\"      \"prob_fun\" \"0\"        \"leftover\" #>  #> $cycles_in_states #> [1] NA  1  2 NA #>  #> $repeated_states #> [1] \"H\" \"S\" \"S\" \"D\" #>  #> $tunneled_states #> [1] \"H\"      \"S_tnl1\" \"S_tnl2\" \"D\"      #>"},{"path":"https://hjalal.github.io/twig/reference/twig.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new twig object — twig","title":"Create a new twig object — twig","text":"function initializes new twig object, can used build Markov models decision trees.","code":""},{"path":"https://hjalal.github.io/twig/reference/twig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new twig object — twig","text":"","code":"twig()"},{"path":"https://hjalal.github.io/twig/reference/twig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new twig object — twig","text":"new twig object class decision_twig twig_class default.","code":""},{"path":"https://hjalal.github.io/twig/reference/twig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new twig object — twig","text":"","code":"twig_obj <- twig() # see vignettes for more"}]
