p0_allowable_args
unsorted_dim_names <- c(p0_core_args, p0_allowable_args[p0_allowable_args != p0_core_args])
p0_array_unsorted <- array(p0, dim = arg_value_sizes[unsorted_dim_names], dimnames = arg_values[unsorted_dim_names])
p0_array_unsorted
perm <- match(p0_allowable_args, unsorted_dim_names)
perm
p0_allowable_args
unsorted_dim_names
p0_array <- aperm(p0_array_unsorted, perm)
p0_array
results <- run_twig(mytwig, params, n_cycles=10, verbose = TRUE)
traceback()
results <- run_twig(mytwig, params, n_cycles=10, verbose = TRUE)
p0_allowable_args
arg_value_sizes
results <- run_twig(mytwig, params, n_cycles=10, verbose = TRUE)
results$markov_trace
sum(results$markov_trace[,"D",1] * 0.5) + sum(results$markov_trace[,"H",1] * 0.5)
sum(results$cycle_ev[, "H", ,])
mytwig <- twig() +
decisions(names = c(A)) +
states(names = c(H,D),
init_probs = c(1,leftover)) +
event(name = die,
options = c(yes,none),
probs = c(pDie, leftover),
transitions = c(D, stay)) +
payoffs(names = c(utility))
params <- list(pdie = 0.5, uH = 1)
pDie <- function(state, pdie){
pdie * (state=="H") #* (decision=="A")
}
utility <- function(state, uH, die){
uH * (die=="yes")
}
results <- run_twig(mytwig, params, n_cycles=10, verbose = TRUE)
results$markov_trace
mytwig <- twig() +
decisions(names = c(A)) +
states(names = c(H,D),
init_probs = c(1,leftover)) +
event(name = die,
options = c(yes,none),
#probs = c(pDie, leftover),
probs = c(0.1, leftover),
transitions = c(D, stay)) +
payoffs(names = c(utility))
mytwig
utility <- function(die){
1 * (die=="yes")
}
results <- run_twig(mytwig, params = NULL, n_cycles=10, verbose = TRUE)
results <- run_twig(mytwig, params = NULL, n_cycles=10, verbose = TRUE)
results <- run_twig(mytwig, params = NULL, n_cycles=10, verbose = TRUE)
mytwig <- twig() +
decisions(names = c(A)) +
states(names = c(H,D),
init_probs = c(1,leftover)) +
event(name = die,
options = c(yes,none),
#probs = c(pDie, leftover),
probs = c(0.1, leftover),
transitions = c(D, stay)) +
payoffs(names = c(utility))
utility <- function(die){
1 * (die=="yes")
}
results <- run_twig(mytwig, params = NULL, n_cycles=10, verbose = TRUE)
results <- run_twig(mytwig, params = NULL, n_cycles=10, verbose = TRUE)
p0_arg_value_sizes
p0_arg_values
arg_value_sizes
p0_core_args
p0_arg_value_sizes
p0_dim
length(p0_funs)
p0_elements
n_compl
p0_array
p0_arg_value_sizes
arg_value_sizes
p0_core_args
p0_funs
fun_args
eval_funs_p0
sim_args
arg_values
core_args
state_layer
n_sims
arg_value_sizes
hash_string
results <- run_twig(mytwig, params = NULL, n_cycles=10, verbose = TRUE)
core_args
twig_obj
sim_args
n_sims
n_cycles
results <- run_twig(mytwig, params = NULL, n_cycles=10, verbose = TRUE)
core_args
arg_values <- get_arg_values(twig_obj, core_args, sim_args, n_sims, n_cycles)
arg_values
results <- run_twig(mytwig, params = NULL, n_cycles=10, verbose = TRUE)
arg_value_sizes
unsorted_dim_names
arg_value_sizes[unsorted_dim_names]
arg_values
unsorted_dim_names
p0_core_args
p0_allowable_args
unsorted_dim_names
p0_core_args
p0_core_args
p0_allowable_args
arg_value_sizes
unsorted_dim_names
n_sims
params
n_sims
results <- run_twig(mytwig, params = NULL, n_cycles=10, verbose = TRUE)
n_expanded_states
prob_funs
payoff_funs
p0_funs
prob_payoff_funs
fun_args
all_args
is_cycle_dep
core_args
event_args
core_non_event_args
core_args
sim_args
results <- run_twig(mytwig, params = NULL, n_cycles=10, verbose = TRUE)
sim_args
arg_values
arg_value_sizes
results <- run_twig(mytwig, params = NULL, n_cycles=10, verbose = TRUE)
size_core_non_event_args
total_size_core_non_event_args
arg_value_sizes
arg_values
check_function_arguments(twig_funs, fun_args, core_args, sim_args)
core_arg_value_sizes
size_core_arg_values
core_arg_value_sizes
R_core_non_event_args
size_R_core_non_event_args
total_size_R_core_non_event_args
fun_core_df
fun_sim_args
dimnames_R0
dimnames_R0
IDX
size_core_arg_values
n_prob_funs
prob_funs
results <- run_twig(mytwig, params = NULL, n_cycles=10, verbose = TRUE)
all_probs
# Get downloads for the 'twig' package starting from a valid date
library(cranlogs)
todays_date <- format(Sys.Date(), "%Y-%m-%d")
cran_downloads("twig", from = "2025-01-16", to = todays_date)
# Get downloads for the 'twig' package starting from a valid date
library(cranlogs)
todays_date <- format(Sys.Date(), "%Y-%m-%d")
cran_downloads("twig", from = "2025-01-16", to = todays_date)
todays_date <- format(Sys.Date(), "%Y-%m-%d")
cran_downloads("twig", from = "2025-01-16", to = todays_date)
todays_date <- format(Sys.Date(), "%Y-%m-%d")
cran_downloads("twig", from = "2025-01-16", to = todays_date)
# Age-dependent mortality rates
lt_usa_2015 <- read.csv("../inst/extdata/LifeTable_USA_Mx_2015.csv")
# Age-dependent mortality rates
lt_usa_2015 <- read.csv("inst/extdata/LifeTable_USA_Mx_2015.csv")
View(lt_usa_2015)
# choose mortality rates from the
v_r_mort_by_age <- as.matrix(lt_usa_2015$Total[lt_usa_2015$Age >= n_age_init & lt_usa_2015$Age < n_age_max])
## -----------------------------------------------------------------------------
n_age_init <- 24 # starting age
n_age_max  <- 100 # maximum age of simulation
# Age-dependent mortality rates
lt_usa_2015 <- read.csv("inst/extdata/LifeTable_USA_Mx_2015.csv")
# choose mortality rates from the
v_r_mort_by_age <- as.matrix(lt_usa_2015$Total[lt_usa_2015$Age >= n_age_init & lt_usa_2015$Age < n_age_max])
v_r_mort_by_age
## ----setup--------------------------------------------------------------------
library(twig)
mytwig <- twig() +
decisions(names = c(StandardOfCare, StrategyA, StrategyB, StrategyAB)) + # define decisions
states(names = c(H, S1, S2, D), # Markov state names
init_probs = c(1,0,0,0), # everyone starts at H
max_cycles = c(1,n_cycles, 1, 1)) + # the cohort can stay in S1 for n_cycles
event(name = death_event,  # first event is death
options = c(yes,none), # which 2 options
probs = c(pDie, leftover), # probability function name and its complement
transitions = c(D, second_event)) + # if death occurs go to D, otherwise, go to the next event (second_event)
event(name = second_event, # the second event
options = c(recover, getsick, progress, none), # has 4 options
probs = c(pRecover, pGetSick, pProgress, leftover), # and 3 named probabilities and a complement
transitions = c(H, S1, S2, stay)) + # resulting in transitions to H, S1, S2 or else staying in the original state
payoffs(names = c(cost, utility), # payoff names
discount_rates = c(0.03, 0.03)) # payoff discount rates
## ----setup--------------------------------------------------------------------
library(twig)
## -----------------------------------------------------------------------------
n_cycles <- 25 # number of cycles
mytwig <- twig() +
decisions(names = c(StandardOfCare, StrategyA, StrategyB, StrategyAB)) + # define decisions
states(names = c(H, S1, S2, D), # Markov state names
init_probs = c(1,0,0,0), # everyone starts at H
max_cycles = c(1,n_cycles, 1, 1)) + # the cohort can stay in S1 for n_cycles
event(name = death_event,  # first event is death
options = c(yes,none), # which 2 options
probs = c(pDie, leftover), # probability function name and its complement
transitions = c(D, second_event)) + # if death occurs go to D, otherwise, go to the next event (second_event)
event(name = second_event, # the second event
options = c(recover, getsick, progress, none), # has 4 options
probs = c(pRecover, pGetSick, pProgress, leftover), # and 3 named probabilities and a complement
transitions = c(H, S1, S2, stay)) + # resulting in transitions to H, S1, S2 or else staying in the original state
payoffs(names = c(cost, utility), # payoff names
discount_rates = c(0.03, 0.03)) # payoff discount rates
n_sims <- 1000
# Create the data.table with n_sim rows of random samples
params <- data.frame(
r_HS1         = rbeta(n_sims, 2, 10),             # Transition rate with beta distribution
r_S1H         = rbeta(n_sims, 5, 5),              # Another transition rate with a different shape
hr_S1         = rlnorm(n_sims, log(3), 0.2),      # Hazard ratio, log-normal to allow skewness
hr_S2         = rlnorm(n_sims, log(10), 0.2),     # Higher hazard ratio, same distribution
hr_S1S2_trtB  = rbeta(n_sims, 6, 4),              # Hazard ratio under treatment with beta distribution
r_S1S2_scale  = rgamma(n_sims, shape = 2, rate = 25), # Scale parameter, gamma distribution
r_S1S2_shape  = rgamma(n_sims, shape = 3, rate = 3),  # Shape parameter, gamma distribution
c_H           = rnorm(n_sims, mean = 2000, sd = 50),   # Annual cost, slight variation for simulation
c_S1          = rnorm(n_sims, mean = 4000, sd = 100),  # Higher annual cost, slightly varied
c_S2          = rnorm(n_sims, mean = 15000, sd = 500), # Large cost with moderate variation
c_D           = 0,                                        # Constant, no variation
c_trtA        = rnorm(n_sims, mean = 12000, sd = 200), # Cost of treatment A with small variation
c_trtB        = rnorm(n_sims, mean = 13000, sd = 200), # Cost of treatment B
u_H           = rbeta(n_sims, 10, 1),                  # Utility close to 1 for Healthy
u_S1          = rbeta(n_sims, 7.5, 2.5),               # Utility less than Healthy, beta distribution
u_S2          = rbeta(n_sims, 5, 5),                   # Utility for Sicker
u_D           = 0,                                        # Utility for Dead is constant
u_trtA        = rbeta(n_sims, 9.5, 1),                 # Utility with treatment A, close to Healthy
du_HS1        = rnorm(n_sims, mean = 0.01, sd = 0.005), # Disutility with slight variation
ic_HS1        = rnorm(n_sims, mean = 1000, sd = 100),   # Cost increase with transition
ic_D          = rnorm(n_sims, mean = 2000, sd = 100),    # Cost increase when dying
p0_H          = rbeta(n_sims, 1, 9)                   # Initial probability of being Healthy
)
## -----------------------------------------------------------------------------
pRecover <- function(state, r_S1H){
rRecover <- r_S1H * (state=="S1")
rate2prob(rRecover)
}
## -----------------------------------------------------------------------------
pGetSick <- function(state, r_HS1){
rGetSick <- r_HS1 * (state=="H")
rate2prob(rGetSick)
}
## -----------------------------------------------------------------------------
pProgress <- function(state, decision, cycle_in_state,
hr_S1S2_trtB, r_S1S2_scale, r_S1S2_shape){
hr_S1S2 <- hr_S1S2_trtB ^ (decision %in% c("StrategyB", "StrategyAB")) # hazard rate of progression for B or 1 otherwise
r_S1S2_tunnels <- ((cycle_in_state*r_S1S2_scale)^r_S1S2_shape -
((cycle_in_state - 1)*r_S1S2_scale)^r_S1S2_shape) # hazard rate based on cycle_in_state (tunnel) which follows a weibull distribution
# only those who are at S1 can progress
rProgress <- r_S1S2_tunnels * (state=="S1") * hr_S1S2
rate2prob(rProgress)
}
# # Age-dependent mortality rates from 2015 US life table for ages 24 to 100
v_r_mort_by_age <- vector <- c(
0.000979, 0.001014, 0.000999, 0.001070, 0.001087, 0.001162, 0.001167, 0.001213, 0.001289,
0.001331, 0.001375, 0.001420, 0.001490, 0.001550, 0.001616, 0.001657, 0.001747, 0.001902,
0.002052, 0.002173, 0.002395, 0.002559, 0.002807, 0.003023, 0.003349, 0.003712, 0.004085,
0.004490, 0.004905, 0.005364, 0.005806, 0.006253, 0.006775, 0.007395, 0.007895, 0.008418,
0.008974, 0.009666, 0.010456, 0.011384, 0.011838, 0.012667, 0.013593, 0.014700, 0.015732,
0.017340, 0.018758, 0.020967, 0.022917, 0.024913, 0.026767, 0.029707, 0.032412, 0.035982,
0.039238, 0.043595, 0.048727, 0.053735, 0.059911, 0.066618, 0.074051, 0.082190, 0.090754,
0.103968, 0.115093, 0.124341, 0.137872, 0.154177, 0.172393, 0.194100, 0.212654, 0.243752,
0.259087, 0.287781, 0.316429, 0.339149
)
# death depends on the state and age.
pDie <- function(state, cycle,
hr_S1, hr_S2){
r_HD <- v_r_mort_by_age[cycle] # get age-specific mortality
rDie <- r_HD * (state=="H") +  # baseline mortality if healthy
r_HD*hr_S1 * (state=="S1") +  # multiplied by a hazard rate if S1 or
r_HD*hr_S2 * (state=="S2") # S2
# else 0
rate2prob(rDie)
}
## -----------------------------------------------------------------------------
cost <- function(state, decision, second_event, death_event,
ic_HS1, ic_D, c_trtA, c_trtB,
c_H, c_S1, c_S2, c_D){
# cost of decision is only applied if the state is either S1 or S2
trans_cost_getting_sick <- ic_HS1 * (second_event=="getsick") # increase in cost when transitioning from Healthy to Sick
trans_cost_dying <- ic_D * (death_event=="yes") # increase in cost when dying
c_decision <- (state %in% c("S1","S2")) * (
c_trtA * (decision=="StrategyA") +
c_trtB * (decision=="StrategyB") +
(c_trtA + c_trtB) * (decision=="StrategyAB")
)
# cost of the state is a function of the state
c_state <- c_H * (state=="H") +
c_S1 * (state=="S1") +
c_S2 * (state=="S2") +
c_D * (state=="D")
# combine both
return(c_decision + c_state + trans_cost_getting_sick + trans_cost_dying)
}
## -----------------------------------------------------------------------------
utility <- function(state, decision, second_event,
du_HS1, u_H, u_trtA, u_S1, u_S2, u_D){
trans_util_getting_sick <- -du_HS1 * (second_event=="getsick") # apply a utility discount for those who get sick.
# calcualte state utilities. note that S1 will have utility u_trtA if the decision involves A, and another utility if the decision does not involve A.
u_state <- u_H * (state=="H") +
u_trtA * (state=="S1" & decision %in% c("StrategyA", "StrategyAB")) +
u_S1 * (state=="S1" & decision %out% c("StrategyA", "StrategyAB")) +
u_S2 * (state=="S2") +
u_D * (state=="D")
# combine the two utilities.
return(u_state + trans_util_getting_sick)
}
## -----------------------------------------------------------------------------
results <- run_twig(twig_obj = mytwig, params = params, n_cycles = n_cycles, progress_bar = FALSE)
## ----include = FALSE----------------------------------------------------------
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
## ----setup--------------------------------------------------------------------
library(twig)
## -----------------------------------------------------------------------------
n_cycles <- 25 # number of cycles
mytwig <- twig() +
decisions(names = c(StandardOfCare, StrategyA, StrategyB, StrategyAB)) + # define decisions
states(names = c(H, S1, S2, D), # Markov state names
init_probs = c(1,0,0,0), # everyone starts at H
max_cycles = c(1,n_cycles, 1, 1)) + # the cohort can stay in S1 for n_cycles
event(name = death_event,  # first event is death
options = c(yes,none), # which 2 options
probs = c(pDie, leftover), # probability function name and its complement
transitions = c(D, second_event)) + # if death occurs go to D, otherwise, go to the next event (second_event)
event(name = second_event, # the second event
options = c(recover, getsick, progress, none), # has 4 options
probs = c(pRecover, pGetSick, pProgress, leftover), # and 3 named probabilities and a complement
transitions = c(H, S1, S2, stay)) + # resulting in transitions to H, S1, S2 or else staying in the original state
payoffs(names = c(cost, utility), # payoff names
discount_rates = c(0.03, 0.03)) # payoff discount rates
n_sims <- 1000
# Create the data.table with n_sim rows of random samples
params <- data.frame(
r_HS1         = rbeta(n_sims, 2, 10),             # Transition rate with beta distribution
r_S1H         = rbeta(n_sims, 5, 5),              # Another transition rate with a different shape
hr_S1         = rlnorm(n_sims, log(3), 0.2),      # Hazard ratio, log-normal to allow skewness
hr_S2         = rlnorm(n_sims, log(10), 0.2),     # Higher hazard ratio, same distribution
hr_S1S2_trtB  = rbeta(n_sims, 6, 4),              # Hazard ratio under treatment with beta distribution
r_S1S2_scale  = rgamma(n_sims, shape = 2, rate = 25), # Scale parameter, gamma distribution
r_S1S2_shape  = rgamma(n_sims, shape = 3, rate = 3),  # Shape parameter, gamma distribution
c_H           = rnorm(n_sims, mean = 2000, sd = 50),   # Annual cost, slight variation for simulation
c_S1          = rnorm(n_sims, mean = 4000, sd = 100),  # Higher annual cost, slightly varied
c_S2          = rnorm(n_sims, mean = 15000, sd = 500), # Large cost with moderate variation
c_D           = 0,                                        # Constant, no variation
c_trtA        = rnorm(n_sims, mean = 12000, sd = 200), # Cost of treatment A with small variation
c_trtB        = rnorm(n_sims, mean = 13000, sd = 200), # Cost of treatment B
u_H           = rbeta(n_sims, 10, 1),                  # Utility close to 1 for Healthy
u_S1          = rbeta(n_sims, 7.5, 2.5),               # Utility less than Healthy, beta distribution
u_S2          = rbeta(n_sims, 5, 5),                   # Utility for Sicker
u_D           = 0,                                        # Utility for Dead is constant
u_trtA        = rbeta(n_sims, 9.5, 1),                 # Utility with treatment A, close to Healthy
du_HS1        = rnorm(n_sims, mean = 0.01, sd = 0.005), # Disutility with slight variation
ic_HS1        = rnorm(n_sims, mean = 1000, sd = 100),   # Cost increase with transition
ic_D          = rnorm(n_sims, mean = 2000, sd = 100),    # Cost increase when dying
p0_H          = rbeta(n_sims, 1, 9)                   # Initial probability of being Healthy
)
## -----------------------------------------------------------------------------
pRecover <- function(state, r_S1H){
rRecover <- r_S1H * (state=="S1")
rate2prob(rRecover)
}
## -----------------------------------------------------------------------------
pGetSick <- function(state, r_HS1){
rGetSick <- r_HS1 * (state=="H")
rate2prob(rGetSick)
}
## -----------------------------------------------------------------------------
pProgress <- function(state, decision, cycle_in_state,
hr_S1S2_trtB, r_S1S2_scale, r_S1S2_shape){
hr_S1S2 <- hr_S1S2_trtB ^ (decision %in% c("StrategyB", "StrategyAB")) # hazard rate of progression for B or 1 otherwise
r_S1S2_tunnels <- ((cycle_in_state*r_S1S2_scale)^r_S1S2_shape -
((cycle_in_state - 1)*r_S1S2_scale)^r_S1S2_shape) # hazard rate based on cycle_in_state (tunnel) which follows a weibull distribution
# only those who are at S1 can progress
rProgress <- r_S1S2_tunnels * (state=="S1") * hr_S1S2
rate2prob(rProgress)
}
# # Age-dependent mortality rates from 2015 US life table for ages 24 to 100
v_r_mort_by_age <- vector <- c(
0.000979, 0.001014, 0.000999, 0.001070, 0.001087, 0.001162, 0.001167, 0.001213, 0.001289,
0.001331, 0.001375, 0.001420, 0.001490, 0.001550, 0.001616, 0.001657, 0.001747, 0.001902,
0.002052, 0.002173, 0.002395, 0.002559, 0.002807, 0.003023, 0.003349, 0.003712, 0.004085,
0.004490, 0.004905, 0.005364, 0.005806, 0.006253, 0.006775, 0.007395, 0.007895, 0.008418,
0.008974, 0.009666, 0.010456, 0.011384, 0.011838, 0.012667, 0.013593, 0.014700, 0.015732,
0.017340, 0.018758, 0.020967, 0.022917, 0.024913, 0.026767, 0.029707, 0.032412, 0.035982,
0.039238, 0.043595, 0.048727, 0.053735, 0.059911, 0.066618, 0.074051, 0.082190, 0.090754,
0.103968, 0.115093, 0.124341, 0.137872, 0.154177, 0.172393, 0.194100, 0.212654, 0.243752,
0.259087, 0.287781, 0.316429, 0.339149
)
# death depends on the state and age.
pDie <- function(state, cycle,
hr_S1, hr_S2){
r_HD <- v_r_mort_by_age[cycle] # get age-specific mortality
rDie <- r_HD * (state=="H") +  # baseline mortality if healthy
r_HD*hr_S1 * (state=="S1") +  # multiplied by a hazard rate if S1 or
r_HD*hr_S2 * (state=="S2") # S2
# else 0
rate2prob(rDie)
}
## -----------------------------------------------------------------------------
cost <- function(state, decision, second_event, death_event,
ic_HS1, ic_D, c_trtA, c_trtB,
c_H, c_S1, c_S2, c_D){
# cost of decision is only applied if the state is either S1 or S2
trans_cost_getting_sick <- ic_HS1 * (second_event=="getsick") # increase in cost when transitioning from Healthy to Sick
trans_cost_dying <- ic_D * (death_event=="yes") # increase in cost when dying
c_decision <- (state %in% c("S1","S2")) * (
c_trtA * (decision=="StrategyA") +
c_trtB * (decision=="StrategyB") +
(c_trtA + c_trtB) * (decision=="StrategyAB")
)
# cost of the state is a function of the state
c_state <- c_H * (state=="H") +
c_S1 * (state=="S1") +
c_S2 * (state=="S2") +
c_D * (state=="D")
# combine both
return(c_decision + c_state + trans_cost_getting_sick + trans_cost_dying)
}
## -----------------------------------------------------------------------------
utility <- function(state, decision, second_event,
du_HS1, u_H, u_trtA, u_S1, u_S2, u_D){
trans_util_getting_sick <- -du_HS1 * (second_event=="getsick") # apply a utility discount for those who get sick.
# calcualte state utilities. note that S1 will have utility u_trtA if the decision involves A, and another utility if the decision does not involve A.
u_state <- u_H * (state=="H") +
u_trtA * (state=="S1" & decision %in% c("StrategyA", "StrategyAB")) +
u_S1 * (state=="S1" & decision %out% c("StrategyA", "StrategyAB")) +
u_S2 * (state=="S2") +
u_D * (state=="D")
# combine the two utilities.
return(u_state + trans_util_getting_sick)
}
## -----------------------------------------------------------------------------
results <- run_twig(twig_obj = mytwig, params = params, n_cycles = n_cycles, progress_bar = FALSE)
results$mean_ev
## -----------------------------------------------------------------------------
calculate_icers(results$mean_ev)
## ----fig.width=7, fig.height=5------------------------------------------------
plot_ceac(results$sim_ev, wtp_range = seq(0, 100000, by = 1000))
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(twig)
library(twig)
# Define a basic Markov model using `twig`
mytwig <- twig() +
decisions(names = c(A, B)) +               # Decision alternatives
states(names = c(Alive, Dead),            # States and initial probabilities
init_probs = c(1, 0)) +
event(name = death_event,                   # Define an event (death)
options = c(yes, none),             # Possible outcomes
probs = c(pDie, leftover),          # Probabilities
transitions = c(Dead, stay)) +      # Transitions
payoffs(names = c(cost, utility))         # Define payoffs
# 1. Probability of death depends on state and decision
pDie <- function(state, decision, rrMortA) {
rDie <- 0.01 * # base mortality rate multiplied by
(state == "Alive") * # 1 if alive, 0 otherwise,  multiplied by
rrMortA^(decision == "A")  # relative risk of mortality for A only if decision is A, 1 otherwise
rate2prob(rDie)  # Convert rate to probability
}
# 2. Cost depends on the decision
cost <- function(decision, cA, cB) {
cA * (decision == "A") + # cost of A if decision is A
cB * (decision == "B") # cost of B if decision is B
}
# 3. Utility depends on the state
utility <- function(state, uAlive) {
uAlive * # utility of alive multiplied by
(state == "Alive") # 1 if alive, 0 otherwise
}
n_sims <- 1000  # Number of simulations
psa_params <- data.frame(
rrMortA = rnorm(n_sims, 0.9, 0.1),  # Relative risk of mortality
cA = rlnorm(n_sims, 6, 1),          # Cost of A
cB = rlnorm(n_sims, 5, 1),          # Cost of B
uAlive = rbeta(n_sims, 0.8, 0.2)    # Utility of being alive
)
head(psa_params)  # Examine the first six samples
results <- run_twig(twig_obj = mytwig, params = psa_params, n_cycles = 50)
results$mean_ev  # Average across simulations
results <- run_twig(twig_obj = mytwig, params = psa_params, n_cycles = 50)
results$mean_ev  # Average across simulations
results <- run_twig(twig_obj = mytwig, params = psa_params, n_cycles = 50)
library(twig)
results <- run_twig(twig_obj = mytwig, params = psa_params, n_cycles = 50)
results$mean_ev  # Average across simulations
results$mean_ev
results$sim_ev
calculate_icers(results$mean_ev)
plot_ceac(results$sim_ev, wtp_range = seq(0, 100000, by = 1000))
pkgdown::build_site()
pkgdown::build_site()
cranlogs::cran_downloads("twig", from = "2025-01-01", to = Sys.Date())
