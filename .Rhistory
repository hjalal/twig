# This will replicate the original array in the new dimensions
new_sparse_array[1:original_dims[1], 1:original_dims[2], 1:original_dims[3], , ] <- sparse_array
new_sparse_array[1:original_dims[1], 1:original_dims[2], 1:original_dims[3], , ]
1:original_dims[1]
# Function to add new dimensions to a SparseArray
add_new_dimensions <- function(sparse_array, new_dims) {
# Get the dimensions of the original sparse array
original_dims <- dim(sparse_array)
# Create a new sparse array with the combined dimensions
combined_dims <- c(original_dims, new_dims)
new_sparse_array <- SparseArray(array(0, dim = combined_dims))
# Fill the new sparse array
# This will replicate the original array in the new dimensions
for (i in 1:new_dims[1]) {
for (j in 1:new_dims[2]) {
new_sparse_array[1:original_dims[1], 1:original_dims[2], 1:original_dims[3], i, j] <- sparse_array
}
}
return(new_sparse_array)
}
# Define the new dimensions to be added (2, 4)
new_dims <- c(2, 4)
# Create the expanded sparse array
expanded_sparse_array <- add_new_dimensions(original_sparse_array, new_dims)
# Function to add new dimensions to a SparseArray
add_new_dimensions <- function(sparse_array, new_dims) {
# Get the dimensions of the original sparse array
original_dims <- dim(sparse_array)
# Create a new sparse array with the combined dimensions
combined_dims <- c(original_dims, new_dims)
new_sparse_array <- SparseArray(array(0, dim = combined_dims))
# Fill the new sparse array
# This will replicate the original array in the new dimensions
for (i in 1:new_dims[1]) {
for (j in 1:new_dims[2]) {
new_sparse_array[1:original_dims[1], 1:original_dims[2], 1:original_dims[3], i, j] <- sparse_array
}
}
return(new_sparse_array)
}
# Define the new dimensions to be added (2, 4)
new_dims <- c(2, 4)
# Create the expanded sparse array
expanded_sparse_array <- add_new_dimensions(original_sparse_array, new_dims)
# Create the expanded sparse array
expanded_sparse_array <- add_new_dimensions(original_sparse_array, new_dims)
new_dims
original_sparse_array
# Get the dimensions of the original sparse array
original_dims <- dim(sparse_array)
original_dims
# Create a new sparse array with the combined dimensions
combined_dims <- c(original_dims, new_dims)
new_sparse_array <- SparseArray(array(0, dim = combined_dims))
combined_dims
new_sparse_array
new_dims[1]
1:new_dims[2]
i <- 1
j <- 1
new_sparse_array[1:original_dims[1], 1:original_dims[2], 1:original_dims[3], i, j] <- sparse_array
sparse_array
dim(sparse_array)
new_sparse_array[1:original_dims[1], 1:original_dims[2], 1:original_dims[3], i, j]
dim(new_sparse_array[1:original_dims[1], 1:original_dims[2], 1:original_dims[3], i, j])
dim(sparse_array) <- c(original_dims, 1,1)
sparse_array
# Get the dimensions of the original sparse array
original_dims <- dim(sparse_array)
# Create a new sparse array with the combined dimensions
combined_dims <- c(original_dims, new_dims)
new_sparse_array <- SparseArray(array(0, dim = combined_dims))
dim(sparse_array) <- c(original_dims, 1,1)
# Fill the new sparse array
# This will replicate the original array in the new dimensions
for (i in 1:new_dims[1]) {
for (j in 1:new_dims[2]) {
new_sparse_array[1:original_dims[1], 1:original_dims[2], 1:original_dims[3], i, j] <- sparse_array
}
}
first_slice <- sparse_array[ , , 1]
sparse_array <- original_sparse_array
# Function to add new dimensions to a SparseArray
add_new_dimensions <- function(sparse_array, new_dims) {
# Get the dimensions of the original sparse array
original_dims <- dim(sparse_array)
# Create a new sparse array with the combined dimensions
combined_dims <- c(original_dims, new_dims)
new_sparse_array <- SparseArray(array(0, dim = combined_dims))
#dim(sparse_array) <- c(original_dims, 1,1)
# Fill the new sparse array
# This will replicate the original array in the new dimensions
for (i in 1:new_dims[1]) {
for (j in 1:new_dims[2]) {
new_sparse_array[1:original_dims[1], 1:original_dims[2], 1:original_dims[3], i, j] <- sparse_array
}
}
return(new_sparse_array)
}
# Define the new dimensions to be added (2, 4)
new_dims <- c(2, 4)
# Create the expanded sparse array
expanded_sparse_array <- add_new_dimensions(original_sparse_array, new_dims)
first_slice <- sparse_array[ , , 1]
first_slice
sparse_array[,,1] <- 10
sparse_array
sparse_array[,,1] <- 1:9
sparse_array[,,1] <- SparseArray(array(1:9), dim = c(3,3))
sparse_array[,,1] <- SparseArray(array(1:9, dim = c(3,3)
)
)
sparse_array[,,1] <- array(1:9, dim = c(3,3))
s4
aperm(s4,c(3,1,2))
# Specify how many times you want to repeat the sparse array
repeat_times <- 2  # For example, repeat twice along the new dimension
# Create a list of sparse arrays to be repeated
repeated_arrays <- lapply(1:repeat_times, function(i) sparse_array)
repeated_arrays
# Use abind to combine along a new dimension (4th dimension in this case)
new_sparse_array <- abind(repeated_arrays, along = 4)
new_sparse_array
n_original_dims <- length(original_dims)
# Get the dimensions of the original sparse array
original_dims <- dim(sparse_array)
n_original_dims <- length(original_dims)
original_dims
n_original_dims <- length(original_dims)
i <- 1
length(new_dim)
# Define the new dimensions to be added (2, 4)
new_dims <- c(2, 4)
new_dims
length(new_dim)
length(new_dims)
# Specify how many times you want to repeat the sparse array
repeat_times <- new_dim[i]  # For example, repeat twice along the new dimension
repeat_times
#new_sparse_array <- SparseArray(array(0, dim = combined_dims))
#dim(sparse_array) <- c(original_dims, 1,1)
# Fill the new sparse array
# This will replicate the original array in the new dimensions
new_sparse_array <- sparse_array
# Create a list of sparse arrays to be repeated
repeated_arrays <- lapply(1:repeat_times, function(i) new_sparse_array)
repeated_arrays
new_sim <- n_original_dims + i
new_sim
# Use abind to combine along a new dimension (4th dimension in this case)
new_sparse_array <- abind(repeated_arrays, along = new_dim)
new_sim <- n_original_dims + i
new_dim <- n_original_dims + i
# Use abind to combine along a new dimension (4th dimension in this case)
new_sparse_array <- abind(repeated_arrays, along = new_dim)
i <- 2
# Specify how many times you want to repeat the sparse array
repeat_times <- new_dim[i]  # For example, repeat twice along the new dimension
repeat_times
# Specify how many times you want to repeat the sparse array
repeat_times <- new_dims[i]  # For example, repeat twice along the new dimension
repeat_times
new_dim <- n_original_dims + i
new_dim
# Create a list of sparse arrays to be repeated
repeated_arrays <- lapply(1:repeat_times, function(i) new_sparse_array)
repeated_arrays
# Use abind to combine along a new dimension (4th dimension in this case)
new_sparse_array <- abind(repeated_arrays, along = new_dim)
new_sparse_array
# Function to add new dimensions to a SparseArray
add_new_dimensions <- function(sparse_array, new_dims) {
# Get the dimensions of the original sparse array
original_dims <- dim(sparse_array)
n_original_dims <- length(original_dims)
# Create a new sparse array with the combined dimensions
combined_dims <- c(original_dims, new_dims)
#new_sparse_array <- SparseArray(array(0, dim = combined_dims))
#dim(sparse_array) <- c(original_dims, 1,1)
# Fill the new sparse array
# This will replicate the original array in the new dimensions
new_sparse_array <- sparse_array
for (i in 1:length(new_dims)){
# Specify how many times you want to repeat the sparse array
repeat_times <- new_dims[i]  # For example, repeat twice along the new dimension
new_dim <- n_original_dims + i
# Create a list of sparse arrays to be repeated
repeated_arrays <- lapply(1:repeat_times, function(i) new_sparse_array)
# Use abind to combine along a new dimension (4th dimension in this case)
new_sparse_array <- abind(repeated_arrays, along = new_dim)
}
return(new_sparse_array)
}
# Define the new dimensions to be added (2, 4)
new_dims <- c(2, 4)
# Create the expanded sparse array
expanded_sparse_array <- add_new_dimensions(original_sparse_array, new_dims)
dim(expanded_sparse_array)
# Get the dimensions of the original sparse array
original_dims <- dim(x)
sparse_array
aperm(new_sparse_array, c(5,4,3,2,1))
# Set dimensions of the sparse array
dims <- c(100, 100, 100)  # Dimensions for the array
# Set the number of non-zero elements
num_nonzero <- 1000  # You can adjust this for more or fewer non-zero elements
# Generate random indices for the non-zero elements
set.seed(123)  # For reproducibility
row_indices <- sample(1:dims[1], num_nonzero, replace = TRUE)
col_indices <- sample(1:dims[2], num_nonzero, replace = TRUE)
depth_indices <- sample(1:dims[3], num_nonzero, replace = TRUE)
# Generate random values for the non-zero elements
values <- runif(num_nonzero)  # Random values between 0 and 1
# Create the sparse array using the SparseArray function
sparse_array <- SparseArray(dim = dims,
x = values,
i = row_indices,
j = col_indices,
k = depth_indices)
# Set dimensions of the sparse array
a <- array(0L, 5:3)
a[c(1:2, 8, 10, 15:17, 20, 24, 40, 56:60)] <- (1:15)*10L
svt2 <- as(a, "SVT_SparseArray")
svt2
# how fast is sparsearray:
# Load the SparseArray package
m <- n <- p <- 3
X <- SparseArray(0, dim = c(m,n,p))
x <- array(0, dim = c(m,n,p))
X <- SparseArray(x)
X
x
f <- 0.001
sel_ids <- sample(1:(m*n*p), size = floor(m*n*p*f))
sel_ids
# how fast is sparsearray:
# Load the SparseArray package
m <- n <- p <- 1000
f <- 0.001
x <- array(0, dim = c(m,n,p))
x
X <- SparseArray(x)
X
sel_ids <- sample(1:(m*n*p), size = floor(m*n*p*f))
sel_ids
s <- floor(m*n*p*f)
sel_ids <- sample(1:(m*n*p), size = s)
X[sel_ids] <- randu(s)
X[sel_ids] <- runif(s)
X
s
object.size(X)
object.size(X/(1024^2))
object.size(X)/(1024^2)
object.size(X)/(1024^3)
# how fast is sparsearray:
# Load the SparseArray package
m <- n <- p <- 1000
f <- 0.0001
x <- array(0, dim = c(m,n,p))
X <- SparseArray(x)
s <- floor(m*n*p*f)
sel_ids <- sample(1:(m*n*p), size = s)
X[sel_ids] <- runif(s)
object.size(X)/(1024^3)
X
object.size(X)/(1024^2)
# how fast is sparsearray:
# Load the SparseArray package
m <- n <- p <- 10000
f <- 0.0001
x <- array(0, dim = c(m,n,p))
# how fast is sparsearray:
# Load the SparseArray package
m <- n <- p <- 1000
f <- 0.0001
x <- array(0, dim = c(m,n,p))
x
X <- SparseArray(x)
X
s <- floor(m*n*p*f)
sel_ids <- sample(1:(m*n*p), size = s)
X[sel_ids] <- runif(s)
object.size(X)/(1024^2)
aperm(X, c(3,2,1))
expanded_sparse_array <- add_new_dimensions(X, new_dims)
object.size(expanded_sparse_array)/(1024^2)
aperm(X, c(5,4,3,2,1))
aperm(expanded_sparse_array, c(5,4,3,2,1))
Z <- aperm(expanded_sparse_array, c(1,2,3, 5, 4)) #5,4,3,2,1))
Z <- aperm(expanded_sparse_array, c(1,5,3, 2, 4)) #5,4,3,2,1))
Z <- aperm(expanded_sparse_array, c(2,5,3, 1, 4)) #5,4,3,2,1))
Z
dim(Z)
aperm
aperm
getAnywhere("aperm")
5:1
Z <- aperm(expanded_sparse_array, 5:1) #5,4,3,2,1))
Z <- SparseArray::aperm(expanded_sparse_array, 5:1) #5,4,3,2,1))
sparse_array1
sparse_array2
prod(sparse_array1, sparse_array2)
sum(sparse_array1, sparse_array2)
# test advanced markov model
rm(list = ls())
library(gmod)
library(magrittr)
library(data.table)
?getDTthreads
getDTthreads(verbose = getOption("datatable.verbose"))
getOption("datatable.verbose")
getDTthreads(verbose = T)
setDTthreads(threads = 6)
getDTthreads(verbose = T)
setDTthreads(threads = 1)
getDTthreads(verbose = T)
# test advanced markov model
rm(list = ls())
library(gmod)
library(magrittr)
library(data.table)
getDTthreads(verbose = T)
setDTthreads(threads = 1)
params <- list(
### Transition rates (annual), and hazard ratios (HRs) ----
r_HS1  = 0.15,  # constant annual rate of becoming Sick when Healthy
r_S1H  = 0.5 ,  # constant annual rate of becoming Healthy when Sick
hr_S1  = 3   ,  # hazard ratio of death in Sick vs Healthy
hr_S2  = 10  ,  # hazard ratio of death in Sicker vs Healthy
### Effectiveness of treatment B ----
hr_S1S2_trtB = 0.6,  # hazard ratio of becoming Sicker when Sick under treatment B
#* Weibull parameters for state-residence-dependent transition probability of
#* becoming Sicker when Sick conditional on surviving
r_S1S2_scale = 0.08, # scale
r_S1S2_shape = 1.1 , # shape
### State rewards ----
#### Costs ----
c_H    = 2000 , # annual cost of being Healthy
c_S1   = 4000 , # annual cost of being Sick
c_S2   = 15000, # annual cost of being Sicker
c_D    = 0    , # annual cost of being dead
c_trtA = 12000, # annual cost of receiving treatment A
c_trtB = 13000, # annual cost of receiving treatment B
#### Utilities ----
u_H    = 1   ,  # annual utility of being Healthy
u_S1   = 0.75,  # annual utility of being Sick
u_S2   = 0.5 ,  # annual utility of being Sicker
u_D    = 0   ,  # annual utility of being dead
u_trtA = 0.95,  # annual utility when receiving treatment A
### Transition rewards ----
du_HS1 = 0.01,  # disutility when transitioning from Healthy to Sick
ic_HS1 = 1000,  # increase in cost when transitioning from Healthy to Sick
ic_D   = 2000  # increase in cost when dying
)
# Number of simulations
n_sim <- 5
# Function to constrain values between 0 and 1
bound_01 <- function(x) pmax(0, pmin(1, x))
# Simulate the data.table
sim_dt <- data.table(
sim = 1:n_sim,
r_HS1  = rnorm(n_sim, mean = params$r_HS1, sd = 0.02),
r_S1H  = rnorm(n_sim, mean = params$r_S1H, sd = 0.05),
hr_S1  = rlnorm(n_sim, meanlog = log(params$hr_S1), sdlog = 0.2),
hr_S2  = rlnorm(n_sim, meanlog = log(params$hr_S2), sdlog = 0.3),
hr_S1S2_trtB = rlnorm(n_sim, meanlog = log(params$hr_S1S2_trtB), sdlog = 0.1),
r_S1S2_scale = rnorm(n_sim, mean = params$r_S1S2_scale, sd = 0.01),
r_S1S2_shape = rnorm(n_sim, mean = params$r_S1S2_shape, sd = 0.05),
c_H    = rnorm(n_sim, mean = params$c_H, sd = 100),
c_S1   = rnorm(n_sim, mean = params$c_S1, sd = 200),
c_S2   = rnorm(n_sim, mean = params$c_S2, sd = 1000),
c_D    = rep(params$c_D, n_sim),
c_trtA = rnorm(n_sim, mean = params$c_trtA, sd = 500),
c_trtB = rnorm(n_sim, mean = params$c_trtB, sd = 500),
u_H    = bound_01(rbeta(n_sim, shape1 = 50, shape2 = 1)),
u_S1   = bound_01(rbeta(n_sim, shape1 = 37.5, shape2 = 12.5)),
u_S2   = bound_01(rbeta(n_sim, shape1 = 25, shape2 = 25)),
u_D    = rep(params$u_D, n_sim),
u_trtA = bound_01(rbeta(n_sim, shape1 = 47.5, shape2 = 2.5)),
du_HS1 = bound_01(rnorm(n_sim, mean = params$du_HS1, sd = 0.005)),
ic_HS1 = rnorm(n_sim, mean = params$ic_HS1, sd = 100),
ic_D   = rnorm(n_sim, mean = params$ic_D, sd = 200)
)
# View the first few rows of the simulated data
head(sim_dt)
colMeans(sim_dt)
n_age_init <- 25 # age at baseline gmod starts at cycle 1 instead of 0 in the tutorial
n_age_max  <- 100 # maximum age of follow up
## Age-dependent mortality rates ----
lt_usa_2015 <- read.csv("~/github/gmod/inst/extdata/LifeTable_USA_Mx_2015.csv") %>%
as.data.table()
#* Extract age-specific all-cause mortality for ages in model time horizon
dt_mort <- lt_usa_2015[Age >= n_age_init & Age <= n_age_max][, .(cycle=Age-n_age_init + 1, r_die = Total)]
# merge all data into a list
list_params <- list(dt_mort = dt_mort,
)
# merge all data into a list
list_params <- list(dt_mort = dt_mort,
sim_dt = sim_dt)
dt_mort
# merge all data into a list
list_params <- list(r_die = dt_mort,
psa_dt = sim_dt)
list_params
pRecover <- function(state, r_S1H){
rRecover <- ifelse(state=="S1", r_S1H, 0)
rate2prob(rRecover)
}
pGetSick <- function(state, r_HS1){
rGetSick <- ifelse(state=="H", r_HS1, 0)
rate2prob(rGetSick)
}
pProgress <- function(state, decision, cycle_in_state, hr_S1S2_trtB, r_S1S2_scale,
r_S1S2_shape){
rProgress<- ifelse(state=="S1",
ifelse(decision %in% c("StrategyB", "StrategyAB"), hr_S1S2_trtB, 1) *
((cycle_in_state*r_S1S2_scale)^r_S1S2_shape -
((cycle_in_state - 1)*r_S1S2_scale)^r_S1S2_shape)
, 0) # else 0
rate2prob(rProgress)
}
pDie <- function(state, cycle, r_HD, hr_S1, hr_S2){
r_HD <- v_r_mort_by_age[cycle]
rDie <- ifelse(state=="H", r_HD,
ifelse(state=="S1", r_HD*hr_S1,
ifelse(state=="S2", r_HD*hr_S2,
ifelse(state=="D", 0, 0))))
rate2prob(rDie)
}
x <- data.table(a = 1:10, b = 11:20)
x
f <- function(a) a^2
x[,d = f(a)]
x[,d := f(a)]
x
x[,d := do.call(f, .SD), .SDcols = c("a","b")]
f <- function() a^2
x[,d := do.call(f, .SD)]
x[,d := do.call(f)]
x[,d := f()]
f <- function(a) a^2 + b
x[,d := f()]
x[,d := f(f, list(.SD))]
x <- data.table(a = 1:10, b = 11:20)
f <- function(a) a^2 + b
x[,d := f(f, list(.SD))]
x <- data.table(a = 1:10, b = 11:20)
f <- function(...) a^2 + b
x[,d := f(f, list(.SD))]
x[,d := f(f, list(.SD)), .SDcols = c("a", "b")]
x <- data.table(a = 1:10, b = 11:20)
f <- function(...) a^2 + b
x[,d := f(f, list(.SD)), .SDcols = c("a", "b")]
x[,d := f(f, .SD), .SDcols = c("a", "b")]
x
f()
f <- function(...){
print(...)
a^2 + b
}
f()
f <- function(...){
args <- list(...)
print(args)
a^2 + b
}
f()
f(d = 1:20)
f <- function(...){
args <- list(...)
list2env(args)
print(args)
a^2 + b
}
f(d = 1:20)
x[,d := f(f, .SD), .SDcols = c("a", "b")]
x[,d := do.call(f, .SD), .SDcols = c("a", "b")]
f <- function(...){
args <- list(...)
list2env(args, envir = environment())
print(args)
a^2 + b
}
x[,d := do.call(f, .SD), .SDcols = c("a", "b")]
x
dt_mort
I
J
# merge all data into a list
list_params <- list(r_die = dt_mort,
psa_dt = sim_dt)
list_params
str(list_params)
# Get the column names for each data.table in the list
params_names_list <- lapply(dt_list, colnames)
# Get the column names for each data.table in the list
params_names_list <- lapply(list_params, colnames)
params_names_list
filter_columns <- c("r_die", "c_H", "u_H")
# Get the filtered column names for each data.table in the list
filtered_column_names <- lapply(params_names_list, function(dt) {
intersect(colnames(dt), filter_columns)
})
filtered_column_names
# Get the filtered column names for each data.table in the list
filtered_column_names <- lapply(list_params, function(dt) {
intersect(colnames(dt), filter_columns)
})
filtered_column_names
install.packages("twig")
??twig
